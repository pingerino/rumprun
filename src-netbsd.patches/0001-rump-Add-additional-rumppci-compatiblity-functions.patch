From fb6fd90e5ad13c4c61f435a245ae4a49020dcbc8 Mon Sep 17 00:00:00 2001
From: Kent McLeod <Kent.Mcleod@Data61.csiro.au>
Date: Tue, 14 Feb 2017 15:10:12 +1100
Subject: [PATCH 1/5] rump: Add additional rumppci compatiblity functions

---
 sys/rump/dev/lib/libpci/pci_user.h          |  4 ++++
 sys/rump/dev/lib/libpci/rumpdev_bus_space.c | 24 +++++++++++++++---------
 2 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/sys/rump/dev/lib/libpci/pci_user.h b/sys/rump/dev/lib/libpci/pci_user.h
index 75ddcbb6..08aed242 100644
--- a/sys/rump/dev/lib/libpci/pci_user.h
+++ b/sys/rump/dev/lib/libpci/pci_user.h
@@ -12,12 +12,16 @@
 #include "rumpcomp_userfeatures_pci.h"
 
 void *rumpcomp_pci_map(unsigned long, unsigned long);
+void rumpcomp_pci_unmap(void *);
 int rumpcomp_pci_confread(unsigned, unsigned, unsigned, int, unsigned int *);
 int rumpcomp_pci_confwrite(unsigned, unsigned, unsigned, int, unsigned int);
 
 int rumpcomp_pci_irq_map(unsigned, unsigned, unsigned, int, unsigned);
 void *rumpcomp_pci_irq_establish(unsigned, int (*)(void *), void *);
 
+int rumpcomp_pci_port_out(uint32_t port, int io_size, uint32_t val);
+int rumpcomp_pci_port_in(uint32_t port, int io_size, uint32_t *result);
+
 /* XXX: needs work: support boundary-restricted allocations */
 int rumpcomp_pci_dmalloc(size_t, size_t, unsigned long *, unsigned long *);
 #ifdef RUMPCOMP_USERFEATURE_PCI_DMAFREE
diff --git a/sys/rump/dev/lib/libpci/rumpdev_bus_space.c b/sys/rump/dev/lib/libpci/rumpdev_bus_space.c
index 8d97ea0d..3e4cc6ba 100644
--- a/sys/rump/dev/lib/libpci/rumpdev_bus_space.c
+++ b/sys/rump/dev/lib/libpci/rumpdev_bus_space.c
@@ -75,8 +75,10 @@ bus_space_read_1(bus_space_tag_t bst, bus_space_handle_t bsh,
 
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
+		uint32_t ac;
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("inb %1, %0" : "=a"(rv) : "d"(addr));
+		rumpcomp_pci_port_in(addr, 1, &ac);
+		rv = (uint8_t)ac;
 #else
 		panic("IO space not supported");
 #endif
@@ -92,11 +94,12 @@ bus_space_read_2(bus_space_tag_t bst, bus_space_handle_t bsh,
 	bus_size_t offset)
 {
 	uint16_t rv;
-
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
+		uint32_t ac;
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("in %1, %0" : "=a"(rv) : "d"(addr));
+		rumpcomp_pci_port_in(addr, 2, &ac);
+		rv = (uint16_t)ac;
 #else
 		panic("IO space not supported");
 #endif
@@ -116,7 +119,7 @@ bus_space_read_4(bus_space_tag_t bst, bus_space_handle_t bsh,
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("inl %1, %0" : "=a"(rv) : "d"(addr));
+		rumpcomp_pci_port_in(addr, 4, &rv);
 #else
 		panic("IO space not supported");
 #endif
@@ -168,7 +171,7 @@ bus_space_write_1(bus_space_tag_t bst, bus_space_handle_t bsh,
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("outb %0, %1" :: "a"(v), "d"(addr));
+		rumpcomp_pci_port_out(addr, 1, v);
 #else
 		panic("IO space not supported");
 #endif
@@ -185,7 +188,7 @@ bus_space_write_2(bus_space_tag_t bst, bus_space_handle_t bsh,
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("out %0, %1" :: "a"(v), "d"(addr));
+		rumpcomp_pci_port_out(addr, 2, v);
 #else
 		panic("IO space not supported");
 #endif
@@ -202,7 +205,7 @@ bus_space_write_4(bus_space_tag_t bst, bus_space_handle_t bsh,
 	if (bst == 0) {
 #ifdef IOSPACE_SUPPORTED
 		unsigned short addr = bsh + offset;
-		__asm__ __volatile__("outl %0, %1" :: "a"(v), "d"(addr));
+		rumpcomp_pci_port_out(addr, 4, v);
 #else
 		panic("IO space not supported");
 #endif
@@ -272,10 +275,13 @@ bus_space_unmap(bus_space_tag_t bst, bus_space_handle_t bsh,
 	bus_size_t size)
 {
 
-	if (bst == 0)
+	if (bst == 0) {
+		return;
+	} else {
+		rumpcomp_pci_unmap((void *)bsh);
 		return;
+	}
 
-	panic("%s: unimplemented", __func__);
 }
 
 void
-- 
2.11.0

